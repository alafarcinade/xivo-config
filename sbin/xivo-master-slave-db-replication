#!/bin/sh

SLAVE_IP=$1
DB_NAME='asterisk'
SLAVE_BACKUP='out_slave_backup.sql'
EXCLUDE_TABLES='\
    -T call_log \
    -T call_log_id_seq \
    -T cel \
    -T cel_id_seq \
    -T queue_log \
    -T queue_log_id_seq \
    -T session \
    -T stat_agent \
    -T stat_agent_id_seq \
    -T stat_agent_periodic \
    -T stat_agent_periodic_id_seq \
    -T stat_call_on_queue \
    -T stat_call_on_queue_id_seq \
    -T stat_queue \
    -T stat_queue_id_seq \
    -T stat_queue_periodic \
    -T stat_queue_periodic_id_seq \
    -T dhcp \
    -T dhcp_id_seq \
    -T mail \
    -T mail_id_seq \
    -T monitoring \
    -T monitoring_id_seq \
    -T netiface \
    -T netiface_id_seq \
    -T resolvconf \
    -T resolvconf_id_seq \
'
PG_DUMP_OPTIONS="--data-only $EXCLUDE_TABLES"

if [ -z $SLAVE_IP ]; then
    echo "No IP specified"
    echo "Usage: $(basename $0) ip_addr"
fi

panic() {
    echo "Slave replication failed: $*" | mutt root@localhost
    echo "Slave replication failed: $*"
    exit 1
}

cd /tmp

su postgres -c "pg_dump --host $SLAVE_IP $PG_DUMP_OPTIONS $DB_NAME -f $SLAVE_BACKUP"
if [ $? -ne 0 ]; then
    panic "Slave down"
fi

su postgres -c "pg_dump $PG_DUMP_OPTIONS $DB_NAME -f out_master.sql"
master_md5=$(sort out_master.sql | md5sum | awk '{print $1}')
truncate_cmd="TRUNCATE $(grep '^COPY' out_master.sql | cut -f2 -d\  | paste -sd ',');"

asterisk -rx "module reload cel_pgsql.so"

su postgres -c "psql --host $SLAVE_IP $DB_NAME > /dev/null" <<EOF
$truncate_cmd
EOF
su postgres -c "psql --host $SLAVE_IP $DB_NAME < out_master.sql > /dev/null"
su postgres -c "pg_dump --host $SLAVE_IP $PG_DUMP_OPTIONS $DB_NAME -f out_slave.sql"

slave_md5=$(sort out_slave.sql | md5sum | awk '{print $1}')

if [ "$master_md5" != "$slave_md5" ]; then
    su postgres -c "psql --host $SLAVE_IP $DB_NAME > /dev/null" <<EOF
$truncate_cmd
EOF
    su postgres -c "psql --host $SLAVE_IP $DB_NAME < $SLAVE_BACKUP > /dev/null"
    panic "md5sum didnt match"
else
    echo "Slave replication completed succesfully"
fi
